{"version":3,"file":"static/js/602.1b647de1.chunk.js","mappings":"wNAGaA,EAAOC,EAAAA,EAAOC,GAAV,kDAIJC,EAAOF,EAAAA,EAAOG,GAAV,yFAMJC,GAAYJ,EAAAA,EAAAA,GAAOK,EAAAA,GAAPL,CAAH,8G,SCgBtB,EAzBmB,SAAC,GAAe,IAAbM,EAAY,EAAZA,MACdC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,SAACT,EAAD,UACGO,EAAMG,KAAI,SAAAC,GAAI,OACb,SAACR,EAAD,WACE,SAACE,EAAD,CAAWO,GAAE,kBAAaD,EAAKE,IAAMC,MAAO,CAAEC,KAAMP,GAApD,SACGG,EAAKK,SAFCL,EAAKE,GADH,KASpB,C,yICjBYI,EAAahB,EAAAA,EAAOiB,KAAV,kEAKVC,EAAQlB,EAAAA,EAAOmB,MAAV,iUAkBLC,EAASpB,EAAAA,EAAOqB,OAAV,2S,SCUnB,EA9Ba,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACd,GAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KAWA,OACE,UAACT,EAAD,CAAYU,SANO,SAAAC,GACnBA,EAAMC,iBACNN,EAAaE,EAAMK,cACpB,EAGC,WACE,SAACX,EAAD,CACEY,KAAK,OACLC,KAAK,QACLC,WAAS,EACTC,MAAOT,EACPU,SAhBoB,SAAAP,GACxBF,EAASE,EAAMQ,OAAOF,MACvB,KAgBG,SAACb,EAAD,CAAQU,KAAK,SAAb,SAAsB,aAG3B,E,UCWD,EAjCe,WACb,OAAsCP,EAAAA,EAAAA,UAAS,IAA/C,eAAOa,EAAP,KAAoBC,EAApB,KACA,GAA8Bd,EAAAA,EAAAA,WAAS,GAAvC,eAAOe,EAAP,KAAgBC,EAAhB,KACA,GAAwChB,EAAAA,EAAAA,WAAS,GAAjD,eAAOiB,EAAP,KAAqBC,EAArB,KAkBA,OACE,6BACE,SAAC,EAAD,CAAMnB,aAlBW,SAAAoB,GACnBH,GAAW,IAEXI,EAAAA,EAAAA,IAAqBD,GAClBE,MAAK,SAAAC,GACJR,EAAeQ,GACfJ,EAAyC,IAAzBI,EAAcC,OAC/B,IACAC,OAAM,SAAAC,GACLC,QAAQC,IAAIF,EACb,IACAG,SAAQ,WACPZ,GAAW,EACZ,GACJ,IAKID,IAAW,SAACc,EAAA,EAAD,IACXZ,IACC,uBAAG,4DAEJJ,IAAe,SAACiB,EAAA,EAAD,CAAY/C,MAAO8B,MAGxC,C,mMCnCDkB,EAAAA,EAAMC,SAASC,QAAU,gCAEzB,IAAMC,EAAU,mCAEHC,EAAa,mCAAG,oGACJJ,EAAAA,EAAMK,IAAN,qCAAwCF,IADpC,cACrBG,EADqB,yBAEpBA,EAASC,KAAKC,SAFM,2CAAH,qDAKbnB,EAAoB,mCAAG,WAAMoB,GAAN,uFACXT,EAAAA,EAAMK,IAAN,+BACGF,EADH,4DAC8DM,IAFnD,cAC5BH,EAD4B,yBAI3BA,EAASC,KAAKC,SAJa,2CAAH,sDAOpBE,EAAiB,mCAAG,WAAMC,GAAN,uFACRX,EAAAA,EAAMK,IAAN,gBACZM,EADY,oBACOR,EADP,oBADQ,cACzBG,EADyB,yBAIxBA,EAASC,MAJe,2CAAH,sDAOjBK,EAAW,mCAAG,WAAMD,GAAN,uFACFX,EAAAA,EAAMK,IAAN,gBACZM,EADY,4BACeR,EADf,oBADE,cACnBG,EADmB,yBAIlBA,EAASC,KAAKM,MAJI,2CAAH,sDAOXC,EAAY,mCAAG,WAAMH,GAAN,uFACHX,EAAAA,EAAMK,IAAN,gBACZM,EADY,4BACeR,EADf,2BADG,cACpBG,EADoB,yBAInBA,EAASC,KAAKC,SAJK,2CAAH,qD","sources":["pages/EditorList/EditorList.styled.jsx","pages/EditorList/EditorList.jsx","components/Form/Form.styled.jsx","components/Form/Form.jsx","pages/Movies/Movies.jsx","services/TmbdApi.jsx"],"sourcesContent":["import styled from '@emotion/styled';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport const List = styled.ul`\r\n  list-style-type: none;\r\n`;\r\n\r\nexport const Item = styled.li`\r\n  font-weight: 600;\r\n  font-size: 18px;\r\n  margin-bottom: 10px;\r\n`;\r\n\r\nexport const MovieLink = styled(Link)`\r\n  text-decoration: none;\r\n  color: #021C1E;\r\n\r\n  &:hover {\r\n    color: #6FB98F;\r\n  }\r\n`;\r\n","import { useLocation } from 'react-router-dom';\r\nimport { PropTypes } from 'prop-types';\r\nimport { List, Item, MovieLink } from './EditorList.styled';\r\n\r\nconst EditorList = ({ films }) => {\r\n  const location = useLocation();\r\n\r\n  return (\r\n    <List>\r\n      {films.map(film => (\r\n        <Item key={film.id}>\r\n          <MovieLink to={`/movies/${film.id}`} state={{ from: location }}>\r\n            {film.title}\r\n          </MovieLink>\r\n        </Item>\r\n      ))}\r\n    </List>\r\n  );\r\n};\r\n\r\nEditorList.propTypes = {\r\n  films: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      title: PropTypes.string.isRequired,\r\n      id: PropTypes.number.isRequired,\r\n    })\r\n  ),\r\n};\r\n\r\nexport default EditorList;\r\n","import styled from '@emotion/styled';\r\nexport const SearchForm = styled.form`\r\n  display: flex;\r\n  align-items: center;\r\n`;\r\n\r\nexport const Input = styled.input`\r\n  padding: 12px 14px;\r\n  font: inherit;\r\n  cursor: pointer;\r\n  border-radius: 4px;\r\n  border: 3px solid #021c1e;\r\n  font-weight: 600;\r\n  font-size: 20px;\r\n  margin-right: 10px;\r\n  border-radius: 24px 8px;\r\n  outline: none;\r\n\r\n  &:hover {\r\n    color: #6fb98f;\r\n    border: 3px solid #6fb98f;\r\n  }\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  padding: 12px 12px;\r\n  font: inherit;\r\n  cursor: pointer;\r\n  border-radius: 4px;\r\n  border: 3px solid #021c1e;\r\n  color: #021c1e;\r\n  font-weight: 600;\r\n  font-size: 20px;\r\n  border-radius: 24px 8px;\r\n\r\n  &:hover {\r\n    color: #6fb98f;\r\n    border: 3px solid #6fb98f;\r\n  }\r\n`;\r\n","import { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { SearchForm, Input, Button } from './Form.styled';\r\n\r\nconst Form = ({ searchMovies }) => {\r\n  const [query, setQuery] = useState('');\r\n\r\n  const handleInputChange = event => {\r\n    setQuery(event.target.value);\r\n  };\r\n\r\n  const handleSubmit = event => {\r\n    event.preventDefault();\r\n    searchMovies(query.toLowerCase());\r\n  };\r\n\r\n  return (\r\n    <SearchForm onSubmit={handleSubmit}>\r\n      <Input\r\n        type=\"text\"\r\n        name=\"query\"\r\n        autoFocus\r\n        value={query}\r\n        onChange={handleInputChange}\r\n      />\r\n      <Button type=\"submit\">Search</Button>\r\n    </SearchForm>\r\n  );\r\n};\r\n\r\nForm.propTypes = {\r\n  searchMovies: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Form;\r\n","import { useState } from 'react';\r\nimport Loader from 'components/Loader/Loader';\r\nimport EditorList from 'pages/EditorList/EditorList';\r\nimport Form from 'components/Form/Form';\r\nimport { fetchSearchByKeyword } from 'services/TmbdApi';\r\n\r\nconst Movies = () => {\r\n  const [searchFilms, setSearchFilms] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [noMoviesText, setNoMoviesText] = useState(false);\r\n\r\n  const searchMovies = queryMovie => {\r\n    setLoading(true);\r\n\r\n    fetchSearchByKeyword(queryMovie)\r\n      .then(searchResults => {\r\n        setSearchFilms(searchResults);\r\n        setNoMoviesText(searchResults.length === 0);\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n      })\r\n      .finally(() => {\r\n        setLoading(false);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <main>\r\n      <Form searchMovies={searchMovies} />\r\n      {loading && <Loader />}\r\n      {noMoviesText && (\r\n        <p>There is no movies with this request. Please, try again</p>\r\n      )}\r\n      {searchFilms && <EditorList films={searchFilms} />}\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default Movies;\r\n","import axios from 'axios';\r\n\r\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\r\n\r\nconst API_KEY = 'c67fe955046fda94f580f78044a00ac8';\r\n\r\nexport const fetchTrending = async () => {\r\n  const response = await axios.get(`trending/movie/day?api_key=${API_KEY}`);\r\n  return response.data.results;\r\n};\r\n\r\nexport const fetchSearchByKeyword = async keyword => {\r\n  const response = await axios.get(\r\n    `search/movie?api_key=${API_KEY}&language=en-US&page=1&include_adult=false&query=${keyword}`\r\n  );\r\n  return response.data.results;\r\n};\r\n\r\nexport const fetchMovieDetails = async movieId => {\r\n  const response = await axios.get(\r\n    `movie/${movieId}?api_key=${API_KEY}&language=en-US`\r\n  );\r\n  return response.data;\r\n};\r\n\r\nexport const fetchActors = async movieId => {\r\n  const response = await axios.get(\r\n    `movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\r\n  );\r\n  return response.data.cast;\r\n};\r\n\r\nexport const fetchReviews = async movieId => {\r\n  const response = await axios.get(\r\n    `movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\r\n  );\r\n  return response.data.results;\r\n};\r\n"],"names":["List","styled","ul","Item","li","MovieLink","Link","films","location","useLocation","map","film","to","id","state","from","title","SearchForm","form","Input","input","Button","button","searchMovies","useState","query","setQuery","onSubmit","event","preventDefault","toLowerCase","type","name","autoFocus","value","onChange","target","searchFilms","setSearchFilms","loading","setLoading","noMoviesText","setNoMoviesText","queryMovie","fetchSearchByKeyword","then","searchResults","length","catch","error","console","log","finally","Loader","EditorList","axios","defaults","baseURL","API_KEY","fetchTrending","get","response","data","results","keyword","fetchMovieDetails","movieId","fetchActors","cast","fetchReviews"],"sourceRoot":""}