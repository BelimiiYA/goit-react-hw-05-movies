{"version":3,"file":"static/js/851.b509ed4c.chunk.js","mappings":"+QAEaA,EAAaC,EAAAA,EAAOC,KAAV,yFAMVC,EAAQF,EAAAA,EAAOG,MAAV,iUAkBLC,EAAeJ,EAAAA,EAAOK,OAAV,2SAgBZC,EAAQN,EAAAA,EAAOO,KAAV,wH,6JCvCLC,EAAY,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC1B,OACE,UAAC,KAAD,CAAYA,SAAUA,EAAtB,WACE,SAAC,KAAD,CAAOC,KAAK,OAAOC,KAAK,QAAQC,WAAS,EAACC,aAAa,SACvD,SAAC,KAAD,CAAcH,KAAK,SAAnB,UACE,UAAC,KAAD,WAAO,UAEL,SAAC,MAAD,CAAmBI,MAAO,CAAEC,MAAO,GAAIC,OAAQ,aAKxD,E,iDCbYC,EAAOjB,EAAAA,GAAOkB,GAAV,iIASJC,EAAOnB,EAAAA,GAAOoB,GAAV,2DAIJC,EAAQrB,EAAAA,GAAOsB,IAAV,uNAWLC,EAAQvB,EAAAA,GAAOwB,EAAV,oJAEP,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,KAAhB,ICxBHC,EAAa,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACrBC,GAAWC,EAAAA,EAAAA,MACjB,OACE,SAACd,EAAD,UACGY,EAAOG,KAAI,YAAiC,IAA9BC,EAA6B,EAA7BA,GAAIC,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,YACxB,OACE,SAAChB,EAAD,WACE,UAAC,KAAD,CACEiB,GAAE,UAAKH,GACPI,MAAO,CAAEC,KAAMR,EAASS,SAAWT,EAASU,QAF9C,WAIE,0BACE,SAACnB,EAAD,CACEoB,IACEN,EACI,mCAAqCA,EAD9B,6EAIbO,IAAI,aAGR,SAACnB,EAAD,UAAQW,QAfDD,EAmBd,KAGN,E,oBCaD,G,QArCe,WAAO,IAAD,EACnB,GAA8BU,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAK,UAAGF,EAAaG,IAAI,gBAApB,QAAgC,GA0B3C,OAlBAC,EAAAA,EAAAA,YAAU,WAAM,wCACd,WAAqBF,GAArB,iGAE0BG,EAAAA,EAAAA,IAAqBH,EAAMI,QAFrD,YAEUT,EAFV,QAGgBU,OAHhB,uBAIMT,GAAW,OAAID,IAJrB,0BAOIW,EAAAA,GAAMC,MAAM,sCAPhB,kDASID,EAAAA,GAAMC,MAAN,MATJ,0DADc,wBAaVP,GAbW,SAAD,2BAcZQ,CAAMR,EAET,GAAE,CAACA,KAGF,6BACE,SAACzC,EAAD,CAAWC,SA1BE,SAAAiD,GACfA,EAAIC,iBACJX,EAAgB,CAAEC,MAAOS,EAAIE,OAAOX,MAAMY,QAC1CH,EAAIE,OAAOE,OACZ,KAuBG,SAAClC,EAAD,CAAYC,OAAQe,MAGzB,E","sources":["components/SearchBar/SearchBar.styled.jsx","components/SearchBar/SearchBar.jsx","components/SearchList/SearchList.styled.jsx","components/SearchList/SearchList.jsx","pages/Videos/Videos.jsx"],"sourcesContent":["import styled from '@emotion/styled';\r\n\r\nexport const SearchForm = styled.form`\r\n  margin-left: 235px;\r\n  display: flex;\r\n  align-items: center;\r\n`;\r\n\r\nexport const Input = styled.input`\r\n  padding: 12px 14px;\r\n  font: inherit;\r\n  cursor: pointer;\r\n  border-radius: 4px;\r\n  border: 3px solid #021c1e;\r\n  font-weight: 600;\r\n  font-size: 20px;\r\n  margin-right: 10px;\r\n  border-radius: 24px 8px;\r\n  outline: none;\r\n\r\n  &:hover {\r\n    color: #686868;\r\n    border: 3px solid #686868;\r\n  }\r\n`;\r\n\r\nexport const SearchButton = styled.button`\r\n  padding: 12px 12px;\r\n  font: inherit;\r\n  cursor: pointer;\r\n  border-radius: 4px;\r\n  border: 3px solid #021c1e;\r\n  color: #021c1e;\r\n  font-weight: 600;\r\n  font-size: 20px;\r\n  border-radius: 24px 8px;\r\n\r\n  &:hover {\r\n    color: #686868;\r\n    border: 3px solid #686868;\r\n  }\r\n`;\r\nexport const Label = styled.span`\r\n  display: flex;\r\n  justify-content: center;\r\n  gap: 8px;\r\n  font: inherit;\r\n  font-size: 20px;\r\n`;\r\n","import { SearchForm, Input, SearchButton, Label } from './SearchBar.styled';\r\nimport { BsSearchHeartFill } from 'react-icons/bs';\r\n\r\nexport const SearchBar = ({ onSubmit }) => {\r\n  return (\r\n    <SearchForm onSubmit={onSubmit}>\r\n      <Input type=\"text\" name=\"query\" autoFocus autoComplete=\"off\" />\r\n      <SearchButton type=\"submit\">\r\n        <Label>\r\n          Search\r\n          <BsSearchHeartFill style={{ width: 20, height: 20 }} />\r\n        </Label>\r\n      </SearchButton>\r\n    </SearchForm>\r\n  );\r\n};\r\n","import styled from 'styled-components';\r\n\r\nexport const List = styled.ul`\r\n  margin: 40px;\r\n  padding: 0;\r\n  list-style: none;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 16px;\r\n`;\r\n\r\nexport const Item = styled.li`\r\n  width: calc((100% - 32px) / 3);\r\n`;\r\n\r\nexport const Image = styled.img`\r\n  margin-bottom: 6px;\r\n  width: 100%;\r\n  object-fit: cover;\r\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\r\n  &:hover {\r\n    transform: scale(1.03);\r\n    cursor: pointer;\r\n  }\r\n`;\r\n\r\nexport const Title = styled.p`\r\n  text-align: center;\r\n  color: ${props => props.theme.black};\r\n  font-size: 18px;\r\n  line-height: 24px;\r\n  font-style: normal;\r\n  font-weight: 500;\r\n`;\r\n","import { Link, useLocation } from 'react-router-dom';\r\nimport { List, Item, Image, Title } from './SearchList.styled';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const SearchList = ({ movies }) => {\r\n  const location = useLocation();\r\n  return (\r\n    <List>\r\n      {movies.map(({ id, title, poster_path }) => {\r\n        return (\r\n          <Item key={id}>\r\n            <Link\r\n              to={`${id}`}\r\n              state={{ from: location.pathname + location.search }}\r\n            >\r\n              <div>\r\n                <Image\r\n                  src={\r\n                    poster_path\r\n                      ? 'https://image.tmdb.org/t/p/w500/' + poster_path\r\n                      : `https://upload.wikimedia.org/wikipedia/commons/1/14/No_Image_Available.jpg`\r\n                  }\r\n                  alt=\"title\"\r\n                />\r\n              </div>\r\n              <Title>{title}</Title>\r\n            </Link>\r\n          </Item>\r\n        );\r\n      })}\r\n    </List>\r\n  );\r\n};\r\n\r\nSearchList.propTypes = {\r\n  movies: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.number.isRequired,\r\n      title: PropTypes.string.isRequired,\r\n      poster_path: PropTypes.string,\r\n    }).isRequired\r\n  ).isRequired,\r\n};\r\n","import { SearchBar } from '../../components/SearchBar/SearchBar';\r\nimport { useSearchParams } from 'react-router-dom';\r\nimport { useState, useEffect } from 'react';\r\nimport { SearchList } from 'components/SearchList/SearchList';\r\nimport { fetchMoviesByKeyWord } from 'services/TmbdApi';\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nconst Videos = () => {\r\n  const [results, setResults] = useState([]);\r\n  const [searchParams, setSearchParams] = useSearchParams();\r\n  const query = searchParams.get('query') ?? '';\r\n\r\n  const onSubmit = evt => {\r\n    evt.preventDefault();\r\n    setSearchParams({ query: evt.target.query.value });\r\n    evt.target.reset();\r\n  };\r\n\r\n  useEffect(() => {\r\n    async function fetch(query) {\r\n      try {\r\n        const results = await fetchMoviesByKeyWord(query.trim());\r\n        if (results.length) {\r\n          setResults([...results]);\r\n          return;\r\n        }\r\n        toast.error('No movies found. Try one more time');\r\n      } catch (error) {\r\n        toast.error(error);\r\n      }\r\n    }\r\n    if (query) {\r\n      fetch(query);\r\n    }\r\n  }, [query]);\r\n\r\n  return (\r\n    <main>\r\n      <SearchBar onSubmit={onSubmit} />\r\n      <SearchList movies={results} />\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default Videos;\r\n"],"names":["SearchForm","styled","form","Input","input","SearchButton","button","Label","span","SearchBar","onSubmit","type","name","autoFocus","autoComplete","style","width","height","List","ul","Item","li","Image","img","Title","p","props","theme","black","SearchList","movies","location","useLocation","map","id","title","poster_path","to","state","from","pathname","search","src","alt","useState","results","setResults","useSearchParams","searchParams","setSearchParams","query","get","useEffect","fetchMoviesByKeyWord","trim","length","toast","error","fetch","evt","preventDefault","target","value","reset"],"sourceRoot":""}